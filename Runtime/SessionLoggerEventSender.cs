using UnityEngine;

namespace Inimart.SessionLogger
{
    /// <summary>
    /// Helper component to send a specific Session Action Name (configured in the Inspector)
    /// to the SessionLogger via UnityEvents.
    /// Requires a SessionLoggerSetup asset named 'SessionLoggerSetup' in a Resources folder
    /// or assigned manually to the 'optionalConfigOverride' field.
    /// </summary>
    public class SessionLoggerEventSender : MonoBehaviour
    {
        [Tooltip("(Optional) Assign a specific SessionLoggerSetup here to override loading from Resources.")]
        public SessionLoggerSetup optionalConfigOverride;
        
        [Tooltip("The name of the session action to log when SendConfiguredLogEvent is called. Choose from the dropdown generated by the custom editor.")]
        public string actionToLog; // Public field to configure via custom editor
        
        public bool FireOnEnable = false; // Optional: Fire on enable (if needed)

        // --- Private fields ---
        private SessionLoggerSetup config;
        private bool isInitialized = false;

        private void Awake()
        {
            Initialize();
        }

        private void OnEnable()
        {
            if (FireOnEnable)
            {
                SendConfiguredLogEvent();
            }
        }

        private void Initialize()
        {
            if (isInitialized) return;
            
            // Try to load config from override or Resources
            config = optionalConfigOverride;
            if (config == null)
            {
                config = Resources.Load<SessionLoggerSetup>("SessionLoggerSetup");
            }
            
            // Validate configuration
            if (config == null)
            {
                Debug.LogWarning("No SessionLoggerSetup found either in optionalConfigOverride or in Resources/SessionLoggerSetup");
            }
            else if (string.IsNullOrEmpty(actionToLog))
            {
                Debug.LogWarning("No action name configured in the SessionLoggerLogEventSender component. Please configure in Inspector.");
            }
            else if (config.EventsNames != null)
            {
                bool found = false;
                foreach (string eventName in config.EventsNames)
                {
                    if (eventName == actionToLog)
                    {
                        found = true;
                        break;
                    }
                }
                
                if (!found)
                {
                    Debug.LogWarning($"The configured action '{actionToLog}' is not in the SessionLoggerSetup.EventsNames array. This may result in inaccurate completion percentages.");
                }
            }
            
            isInitialized = true;
        }

        /// <summary>
        /// Sends the event configured in the inspector to the SessionLogger
        /// </summary>
        public void SendConfiguredLogEvent()
        {
            if (!isInitialized)
            {
                Initialize();
            }
            
            if (string.IsNullOrEmpty(actionToLog))
            {
                Debug.LogWarning("Cannot send log event: No action name configured");
                return;
            }
            
            if (SessionLogger.Instance != null)
            {
                SessionLogger.Instance.LogEvent(actionToLog);
            }
            else
            {
                Debug.LogWarning("Cannot send log event: SessionLogger.Instance is null");
            }
        }
    }
} 